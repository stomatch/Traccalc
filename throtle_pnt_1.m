function [ s ] = throtle_pnt_1(tx,pr,w,vn,vlim, sn,tn,sk )
% Еще один вариант, запрограммированно по написанному
% Функция расчета параметров движения поезда в режиме тяги для модели 
% - МАТЕРИАЛЬНАЯ ТОЧКА 
% входные параметры: 
% - tx - удельная тяговая характеристика
% - pr - элемент профиля пути
% - w  - основное удельное сопротивление движению поезда
% - vn - начальная скорость режима тяги  
% - vlim - ограничение по скорости (максимальная скорость до которой можем
% разогнаться)
% - sn - начальная координата режима тяги
% - tn - начальное время режима тяги
% - sk - конечная точка движения
%

%% определяем коэффициенты результирующей силы тяги на участке
cfr(1,1)=tx(1,4)-w(1,1)-pr(1,3);
cfr(1,2)=tx(1,5)-w(1,2);
cfr(1,3)=tx(1,6)-w(1,3);
%% блок необходимый для отладки после закоментировать или удалить нафиг
% fres_g=f_res_trotle(cfr,vn,tx(1,3));
% plot(fres_g(:,1),fres_g(:,2));
f=0;
%% продолжаем работать с результирующей силой
% определяем значение результирующей силы для скорости равной vn и для
% скорости равной tx(1,3) т.е. для конечной скорости для данной
% характеристики. зачем? пока не уверен, но чувствую пригодится
fres_vn=f_res(cfr,vn);


fres_vk=f_res(cfr,tx(1,3));
%если результирующая сила меняет знак, то в какой-то момент наступит
%установишийся режим движения поезда, т.е. движение с постоянной скоростью,
%следовательно нам необходимо искать корни уравнения и определять скорость
%установившегося режима
if ((fres_vn>0) && (fres_vk<0)) || ((fres_vn<0) && (fres_vk>0))
    %определяем скорость установившегося режима корней может быть два и
    %тогда нам нужно будет использовать меньшее значение v_const(1,1)
    v_const=fzero(@(x) f_res(cfr,x),[vn tx(1,3)]); 
else
    %если знак не меняется скорость установившегося режима приравниваем -1
    %и использум как флаг говорящий об отстутсвии скорости установившегося
    %режима на данном элементе профиля пути
    v_const=-1;
end
%Определяем постоянные интегрирования по пути и по времени
sc=SVCurve(cfr,vn);
tc=TVCurve(cfr,vn);
%Теперь надо определиться попадем или нет в текущий профиль пути при
%конечной скорости, но сначала необходимо определиться с этой конечной
%скоростью
if v_const<0
    v_min(1,1)=tx(1,3);
    v_min(1,2)=vlim;
    vk=min(v_min);
else
    v_min(1,1)=tx(1,3);
    v_min(1,2)=vlim;
    v_min(1,3)=v_const;
    vk=min(v_min);
end
Stmp=SVCurve(cfr,vk)-sc;
% теперь необходимо определить, в какую точку пути мы попали при скорости
% vk. Не проехали ли мы  точку окончания расчета и если не проехали ее, то
% не проехали ли мы конец элемента профиля пути.
if sk>=(pr(1,2)+pr(1,4))
    if Stmp+sn>pr(1,4)+pr(1,2)
         %если при данной скорости vk проскочили текущий элемент профиля пути
         %ищем скорость при которой попадем точно в конечную точку профиля пути
         vk=fzero(@(x) (SVCurve(cfr,x)-sc+sn-pr(1,4)-pr(1,2)), [vn vk]);
         f=1;
    end
else
    if Stmp+sn>sk
        vk=fzero(@(x) (SVCurve(cfr,x)-sc+sn-sk), [vn vk]);
%         vk1=fsolve(@(x) (SVCurve(cfr,x)-sc-sk-pr(1,2)), 59);
%         vk=vk1(1,1);
        
    end

end
% начальная скорость известна, конечная скорость известна, считаем
% координату и время движения  
dv=(vk-vn)/10;
c=1;
for i=vn:dv:vk
    s(c,1)=i; %скорость движения
    s(c,2)=SVCurve(cfr,i)-sc+sn; %координата пути
    s(c,3)=TVCurve(cfr,i)-tc+tn; %время в пути
    s(c,4)=vlim; %ограничение скорости
    s(c,5)=v_const; %скорость установившегося режима
    s(c,6)=f_res(cfr,i); %удельная результирующая сила действующая на поезд
    s(c,7)=pr(1,3); %значение уклона
    c=c+1;
end
c=c-1;
s(c,1)=vk;
if f==1
    s(c,2)=pr(1,2)+pr(1,4);
else
    s(c,2)=SVCurve(cfr,vk)-sc+sn;
end
s(c,3)=TVCurve(cfr,vk)-tc+tn;
s(c,4)=vlim; %ограничение скорости
s(c,5)=v_const; %скорость установившегося режима
s(c,6)=f_res(cfr,vk); %удельная результирующая сила действующая на поезд
s(c,7)=pr(1,3); %значение уклона
end

